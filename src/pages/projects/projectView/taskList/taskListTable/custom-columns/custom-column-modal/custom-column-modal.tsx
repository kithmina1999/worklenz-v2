import { Button, Divider, Flex, Form, Input, message, Modal, Select, Typography } from 'antd';
import SelectionTypeColumn from './selection-type-column/selection-type-column';
import NumberTypeColumn from './number-type-column/number-type-column';
import LabelTypeColumn from './label-type-column/label-type-column';
import FormulaTypeColumn from './formula-type-column/formula-type-column';
import { useAppSelector } from '@/hooks/useAppSelector';
import { useAppDispatch } from '@/hooks/useAppDispatch';
import {
  CustomFieldNumberTypes,
  CustomFieldsTypes,
  setCustomColumnModalAttributes,
  setCustomFieldType,
  toggleCustomColumnModalOpen,
} from '@features/projects/singleProject/task-list-custom-columns/task-list-custom-columns-slice';
import CustomColumnHeader from '../custom-column-header/custom-column-header';
import { nanoid } from '@reduxjs/toolkit';
import {
  CustomTableColumnsType,
  deleteCustomColumn,
  updateCustomColumn,
} from '@features/projects/singleProject/taskListColumns/taskColumnsSlice';
import { themeWiseColor } from '@/utils/themeWiseColor';
import KeyTypeColumn from './key-type-column/key-type-column';
import logger from '@/utils/errorLogger';
import { addCustomColumn } from '@/features/tasks/tasks.slice';
import { useParams } from 'react-router-dom';
import apiClient from '@/api/api-client';

const CustomColumnModal = () => {
  const [mainForm] = Form.useForm();
  const { projectId } = useParams();

  //   get theme details from theme reducer
  const themeMode = useAppSelector(state => state.themeReducer.mode);

  const dispatch = useAppDispatch();

  const {
    customColumnId,
    customColumnModalType,
    isCustomColumnModalOpen,
    decimals,
    label,
    labelPosition,
    previewValue,
    expression,
    firstNumericColumn,
    secondNumericColumn,
    labelsList,
    selectionsList,
    customFieldType
  } = useAppSelector(state => state.taskListCustomColumnsReducer);
  // get initial data from task list custom column slice
  const fieldType: CustomFieldsTypes = useAppSelector(
    state => state.taskListCustomColumnsReducer.customFieldType
  );
  // number column initial data
  const numberType: CustomFieldNumberTypes = useAppSelector(
    state => state.taskListCustomColumnsReducer.customFieldNumberType
  );

  // if it is already created column get the column data
  const openedColumn = useAppSelector(
    state => state.taskReducer.customColumns
  ).find(col => col.key === customColumnId);

  const fieldTypesOptions = [
    {
      key: 'people',
      value: 'people',
      label: 'People',
      disabled: false,
    },
    {
      key: 'number',
      value: 'number',
      label: 'Number',
      disabled: false,
    },
    {
      key: 'date',
      value: 'date',
      label: 'Date',
      disabled: false,
    },
    {
      key: 'selection',
      value: 'selection',
      label: 'Selection',
      disabled: false,
    },
    {
      key: 'checkbox',
      value: 'checkbox',
      label: 'Checkbox',
      disabled: true,
    },
    {
      key: 'labels',
      value: 'labels',
      label: 'Labels',
      disabled: true,
    },
    {
      key: 'key',
      value: 'key',
      label: 'Key',
      disabled: true,
    },
    {
      key: 'formula',
      value: 'formula',
      label: 'Formula',
      disabled: true,
    },
  ];

  // function to handle form submit
  const handleFormSubmit = async (value: any) => {
    try {
      if (customColumnModalType === 'create') {
        const columnKey = nanoid(); // this id is random and unique, generated by redux

        const newColumn: CustomTableColumnsType = {
          key: columnKey,
          name: value.fieldTitle,
          columnHeader: <CustomColumnHeader columnKey={columnKey} columnName={value.fieldTitle} />,
          width: 150,
          isVisible: true,
          isCustomColumn: true,
          customColumnObj: {
            ...value,
            labelsList: value.fieldType === 'labels' ? labelsList : [],
            selectionsList: value.fieldType === 'selection' ? selectionsList : [],
          },
        };

        // Make API request to create custom column
        try {
          await apiClient.post('/api/v1/custom-columns', {
            project_id: projectId,
            name: value.fieldTitle,
            key: columnKey,
            field_type: value.fieldType,
            width: 150,
            is_visible: true,
            configuration: {
              field_title: value.fieldTitle,
              field_type: value.fieldType,
              number_type: value.numberType,
              decimals: value.decimals,
              label: value.label,
              label_position: value.labelPosition,
              preview_value: value.previewValue,
              expression: value.expression,
              first_numeric_column_key: value.firstNumericColumn?.key,
              second_numeric_column_key: value.secondNumericColumn?.key,
              selections_list: value.fieldType === 'selection' ? selectionsList.map((selection, index) => ({
                selection_id: selection.selectionId,
                selection_name: selection.selectionName,
                selection_color: selection.selectionColor,
                selection_order: index
              })) : [],
              labels_list: value.fieldType === 'labels' ? labelsList.map((label, index) => ({
                label_id: label.labelId,
                label_name: label.labelName,
                label_color: label.labelColor,
                label_order: index
              })) : []
            }
          });
          
          // Add to local state
          dispatch(addCustomColumn(newColumn));
          dispatch(setCustomColumnModalAttributes({ modalType: 'create', columnId: null }));
          dispatch(toggleCustomColumnModalOpen(false));
        } catch (error) {
          logger.error('Error creating custom column:', error);
          message.error('Failed to create custom column');
        }
      } else if (customColumnModalType === 'edit' && customColumnId) {
        const updatedColumn = openedColumn
          ? {
              ...openedColumn,
              name: value.fieldTitle,
              columnHeader: (
                <CustomColumnHeader columnKey={customColumnId} columnName={value.fieldTitle} />
              ),
              customColumnObj: {
                ...openedColumn.customColumnObj,
                fieldTitle: value.fieldTitle,
                fieldType: value.fieldType,
                numberType: value.numberType,
                decimals: value.decimals,
                label: value.label,
                labelPosition: value.labelPosition,
                previewValue: value.previewValue,
                expression: value.expression,
                firstNumericColumn: value.firstNumericColumn,
                secondNumericColumn: value.secondNumericColumn,
                labelsList: value.fieldType === 'labels' ? labelsList : [],
                selectionsList: value.fieldType === 'selection' ? selectionsList : [],
              },
            }
          : null;

        if (updatedColumn) {
          try {
            // Make API request to update custom column
            await apiClient.put(`/api/v1/custom-columns/${openedColumn?.id || customColumnId}`, {
              name: value.fieldTitle,
              field_type: value.fieldType,
              width: 150,
              is_visible: true,
              configuration: {
                field_title: value.fieldTitle,
                field_type: value.fieldType,
                number_type: value.numberType,
                decimals: value.decimals,
                label: value.label,
                label_position: value.labelPosition,
                preview_value: value.previewValue,
                expression: value.expression,
                first_numeric_column_key: value.firstNumericColumn?.key,
                second_numeric_column_key: value.secondNumericColumn?.key,
                selections_list: value.fieldType === 'selection' ? selectionsList.map((selection, index) => ({
                  selection_id: selection.selectionId,
                  selection_name: selection.selectionName,
                  selection_color: selection.selectionColor,
                  selection_order: index
                })) : [],
                labels_list: value.fieldType === 'labels' ? labelsList.map((label, index) => ({
                  label_id: label.labelId,
                  label_name: label.labelName,
                  label_color: label.labelColor,
                  label_order: index
                })) : []
              }
            });
            
            // Close modal
            dispatch(toggleCustomColumnModalOpen(false));
            dispatch(setCustomColumnModalAttributes({ modalType: 'create', columnId: null }));
            
            // Reload the page instead of updating the slice
            window.location.reload();
          } catch (error) {
            logger.error('Error updating custom column:', error);
            message.error('Failed to update custom column');
          }
        }
      }

      mainForm.resetFields();
    } catch (error) {
      logger.error('error in custom column modal', error);
    }
  };

  return (
    <Modal
      title={customColumnModalType === 'create' ? 'Add field' : 'Edit field'}
      centered
      open={isCustomColumnModalOpen}
      onCancel={() => {
        dispatch(toggleCustomColumnModalOpen(false));
        dispatch(setCustomColumnModalAttributes({ modalType: 'create', columnId: null }));
      }}
      styles={{
        header: { position: 'relative' },
        footer: { display: 'none' },
      }}
      onClose={() => {
        mainForm.resetFields();
      }}
      afterOpenChange={
        (open) => {
          if (open) {
            dispatch(setCustomFieldType(openedColumn?.customColumnObj.fieldType));
            mainForm.setFieldsValue({
              fieldTitle: openedColumn?.customColumnObj.fieldTitle,
              fieldType: openedColumn?.customColumnObj.fieldType,
              numberType: openedColumn?.customColumnObj.numberType,
              decimals: openedColumn?.customColumnObj.decimals,
              label: openedColumn?.customColumnObj.label,
              labelPosition: openedColumn?.customColumnObj.labelPosition,
              previewValue: openedColumn?.customColumnObj.previewValue,
              expression: openedColumn?.customColumnObj.expression,
              firstNumericColumn: openedColumn?.customColumnObj.firstNumericColumn,
              secondNumericColumn: openedColumn?.customColumnObj.secondNumericColumn,
            });
          }
        }
      }
    >
      <Divider style={{ position: 'absolute', left: 0, top: 32 }} />

      <Form
        form={mainForm}
        layout="vertical"
        onFinish={handleFormSubmit}
        style={{ marginBlockStart: 24 }}
        initialValues={
          customColumnModalType === 'create'
            ? {
                fieldType,
                numberType,
                decimals,
                label,
                labelPosition,
                previewValue,
                expression,
                firstNumericColumn,
                secondNumericColumn,
              }
            : {
                fieldTitle: openedColumn?.customColumnObj.fieldTitle,
                fieldType: openedColumn?.customColumnObj.fieldType,
                numberType: openedColumn?.customColumnObj.numberType,
                decimals: openedColumn?.customColumnObj.decimals,
                label: openedColumn?.customColumnObj.label,
                labelPosition: openedColumn?.customColumnObj.labelPosition,
                previewValue: openedColumn?.customColumnObj.previewValue,
                expression: openedColumn?.customColumnObj.expression,
                firstNumericColumn: openedColumn?.customColumnObj.firstNumericColumn,
                secondNumericColumn: openedColumn?.customColumnObj.secondNumericColumn,
              }
        }
      >
        <Flex gap={16} align="center" justify="space-between">
          <Form.Item
            name={'fieldTitle'}
            label={<Typography.Text>Field title</Typography.Text>}
            layout="vertical"
            rules={[
              {
                required: true,
                message: 'Field title is required',
              },
            ]}
            required={false}
          >
            <Input placeholder="title" style={{ minWidth: '100%', width: 300 }} />
          </Form.Item>

          <Form.Item
            name={'fieldType'}
            label={<Typography.Text>Type</Typography.Text>}
            layout="vertical"
          >
            <Select
              options={fieldTypesOptions}
              defaultValue={fieldType}
              value={fieldType}
              onChange={value => dispatch(setCustomFieldType(value))}
              style={{
                minWidth: '100%',
                width: 150,
                border: `1px solid ${themeWiseColor('#d9d9d9', '#424242', themeMode)}`,
                borderRadius: 4,
              }}
            />
          </Form.Item>
        </Flex>

        {/* render form items based on types  */}
        {customFieldType === 'key' && <KeyTypeColumn />}
        {customFieldType === 'number' && <NumberTypeColumn />}
        {customFieldType === 'formula' && <FormulaTypeColumn />}
        {customFieldType === 'labels' && <LabelTypeColumn />}
        {customFieldType === 'selection' && <SelectionTypeColumn />}

        <Flex
          gap={8}
          align="center"
          justify={`${customColumnModalType === 'create' ? 'flex-end' : 'space-between'}`}
          style={{ marginBlockStart: 24 }}
        >
          {customColumnModalType === 'edit' && customColumnId && (
            <Button danger onClick={() => dispatch(deleteCustomColumn(customColumnId))}>
              Delete
            </Button>
          )}

          <Flex gap={8}>
            <Button onClick={() => dispatch(toggleCustomColumnModalOpen(false))}>Cancel</Button>
            {customColumnModalType === 'create' ? (
              <Button type="primary" htmlType="submit">
                Create
              </Button>
            ) : (
              <Button type="primary" htmlType="submit">
                Update
              </Button>
            )}
          </Flex>
        </Flex>
      </Form>

      <Divider style={{ position: 'absolute', left: 0, bottom: 42 }} />
    </Modal>
  );
};

export default CustomColumnModal;
